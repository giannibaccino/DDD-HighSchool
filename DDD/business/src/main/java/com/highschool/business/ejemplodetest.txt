an@sofkau.comco");
        va
@InjectMocks
    private ActualizarAprendizUseCase useCase;

    @Mock
    private DomainEventRepository repository;
@Test
    void actualizarAprendizHappyPass(){

        //arrange
        var centroAcondicionamientoId = CentroAcondicionamientoId.of("1");
        var aprendizId = AprendizId.of("A12");
        var telefono = Telefono.of("123456789");
        var email = Email.of("julian@sofkau.comco");
        var nombreCompleto = NombreCompleto.of("Julian");
        var command = new ActualizarAprendiz(centroAcondicionamientoId, aprendizId,
                telefono, email, nombreCompleto);
when(repository.getEventsBy("1")).thenReturn(history());
        useCase.addRepository(repository);
Adryan Ynfante Valero19:23
//act

        var eventos = UseCaseHandler.getInstance()
                .setIdentifyExecutor(command.getAprendizId().value())
                .syncExecutor(useCase, new RequestCommand<>(command))
                .orElseThrow()
                .getDomainEvents();
//assert
        var aprendizActualizado = (AprendizActualizado)eventos.get(0);
        Assertions.assertEquals("1", aprendizActualizado.aggregateRootId());
        Assertions.assertEquals("Julian", aprendizActualizado.getNombreCompleto().value());
        Assertions.assertEquals("A12", aprendizActualizado.getAprendizId().value());
    }
private List<DomainEvent> history() {

        var aprendizId = AprendizId.of("A10");
        var telefono = Telefono.of("123456789");
        var nombreCompleto = NombreCompleto.of("Andres");
        var evento = new AprendizCreado(
                aprendizId,
                telefono,
                nombreCompleto
        );
        evento.setAggregateRootId("Root");
        return List.of(evento);
    }
}